import asyncio
import json

from aiogram import Bot, Dispatcher, Router
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

CLUBS: str = "./clubs.json"
DESCR: str = (
    '<b>–ú–æ–ª–æ–¥—ë–∂–Ω—ã–π —Ü–µ–Ω—Ç—Ä "–û—Ö—Ç–∞"</b> ‚Äì —ç—Ç–æ 21 –º–æ–ª–æ–¥—ë–∂–Ω—ã–π –∫–ª—É–± –∏ –±–æ–ª–µ–µ 300 —Å—Ç—É–¥–∏–π, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–Ω—ã—Ö —É–≥–æ–ª–∫–∞—Ö '
    '–ö—Ä–∞—Å–Ω–æ–≥–≤–∞—Ä–¥–µ–π—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞.\n'
    '–ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äì —Å–æ–∑–¥–∞—Ç—å —Å—Ä–µ–¥—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–π —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å—Å—è!\n\n'
    '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üëá')

file_lock: asyncio.Lock = asyncio.Lock()
router: Router = Router()


async def get_menu(menu: str) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    match menu:
        case "main":
            keyboard = InlineKeyboardBuilder([
                [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", url="https://vk.com/pmc_ohta")],
                [InlineKeyboardButton(text="–í—Å–µ –∫–ª—É–±—ã", callback_data="all")],
                [InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ", callback_data="find")],
                [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="question")]
            ])
        case "back":
            keyboard = InlineKeyboardBuilder([
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main")]
            ])
        case "clubs":
            async with file_lock:
                with open(CLUBS) as f:
                    clubs = json.load(f)

            buttons: list = []

            for i, club in enumerate(clubs):
                buttons.append(
                    [InlineKeyboardButton(text=club["name"], callback_data=f"club:{i}")]
                )

            keyboard = InlineKeyboardBuilder(buttons + [
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main")]
            ])

    return keyboard.as_markup()


@router.message(lambda m: m.text == "/start")
async def start(message: Message) -> None:
    await message.reply(
        f'–ü—Ä–∏–≤–µ—Ç!\n\n{DESCR}',
        reply_markup=await get_menu("main"))


@router.callback_query(lambda c: c.data == "find")
async def find(callback: CallbackQuery) -> None:
    # TODO
    await callback.message.answer(
        "–ü–æ–∏—Å–∫ –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!",
        reply_markup=await get_menu("back"))


@router.callback_query(lambda c: c.data == "main")
async def back_to_main(callback: CallbackQuery) -> None:
    await callback.message.answer(
        f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n\n{DESCR}",
        reply_markup=await get_menu("main"))


@router.callback_query(lambda c: c.data == "all")
async def show_all_clubs(callback: CallbackQuery) -> None:
    await callback.message.answer(
        '–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –∫–ª—É–±—ã –ü–ú–¶ "–û—Ö—Ç–∞".\n'
        '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—É–±–µ.',
        reply_markup=await get_menu("clubs"))


@router.callback_query(lambda c: c.data == "question")
async def ask_question(callback: CallbackQuery) -> None:
    # TODO
    await callback.message.answer(
        "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º!",
        reply_markup=await get_menu("back"))


@router.callback_query(lambda c: c.data.startswith("club:"))
async def get_club_info(callback: CallbackQuery) -> None:
    async with file_lock:
        with open(CLUBS) as f:
            club = json.load(f)[int(callback.data.split(':')[-1])]

    await callback.message.answer(
        f'<b>{club["name"]}</b>\n'
        f'<i>{club["address"]}</i>\n\n'
        f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n- {';\n- '.join(club["sections"])}.\n',
        reply_markup=InlineKeyboardBuilder(
            [
                [InlineKeyboardButton(text='–Ø.–ö–∞—Ä—Ç—ã', url=club["y_maps"])],
                [InlineKeyboardButton(text='–í–ö–æ–Ω—Ç–∞–∫—Ç–µ', url=club["vk"])],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main")]
            ]
        ).as_markup()
    )


async def main() -> None:
    bot = Bot(token="7900208048:AAEFSShliZrdNyRVK563FW2IUYpZT7t1_zs",
              default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    dp = Dispatcher()
    dp.include_router(router)

    await bot.delete_webhook(True)

    await dp.start_polling(bot)


if __name__ == "__main__":
    print("Started")
    asyncio.run(main())
